{{template "base" .}}

{{define "title"}}
Bronze Plan
{{end}}

{{define "content"}}
{{$widget := index .Data "widget"}}
    <h2 class="mt-3 text-center">Bronze Plan</h2>
    <hr/>
    <h3 class="mt-1 text-center">{{formatCurrency $widget.Price}}/month</h3>
    <div class="alert alert-danger text-center d-none" id="card-messages"></div>
    <form
    method="post"
    action="/payment-succeeded-temp"
    name="charge-form" id="charge-form"
    class="d-block needs-validation charge-form"
    autocomplete="off"
    novalidate=""
    >

    <input type="hidden" name="product-id" id="product-id" value="{{$widget.ID}}" />
    <input type="hidden" name="amount" id="amount" value="{{$widget.Price}}" />
    <p>{{$widget.Description}}</p>
    <hr/>

    <div class="mb-3">
        <label for="first-name" class="form-label">First Name</label>
        <input type="text" name="first-name" id="first-name" class="form-control" required="" autocomplete="first-name-new" />
    </div>

    <div class="mb-3">
        <label for="last-name" class="form-label">Last Name</label>
        <input type="text" name="last-name" id="last-name" class="form-control" required="" autocomplete="last-name-new" />
    </div>

    <div class="mb-3">
        <label for="cardholder-email" class="form-label">Email</label>
        <input type="email" name="cardholder-email" id="cardholder-email" class="form-control" required="" autocomplete="cardholder-email-new" />
    </div>

    <div class="mb-3">
        <label for="cardholder-name" class="form-label">Name on Card</label>
        <input type="text" name="cardholder-name" id="cardholder-name" class="form-control" required="" autocomplete="cardholder-name-new" />
    </div>

    <!-- Card Number will be built by Stripe -->
    <div class="mb-3">
        <label for="card-element" class="form-label">Credit Card</label>
        <div id="card-element" class="form-control"></div>
        <div id="card-errors" class="alert-danger text-center" role="alert"></div>
        <div id="card-success" class="alert-success text-center" id="card-success" role="alert"></div>
    </div>

    <hr/>

    <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onclick="validation()">Pay {{formatCurrency $widget.Price}}/month</a>
    <div id="processing-payment" class="text-center d-none">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
    
    <input type="hidden" name="payment-intent" id="payment-intent" />
    <input type="hidden" name="payment-method" id="payment-method" />
    <input type="hidden" name="payment-amount" id="payment-amount" />
    <input type="hidden" name="payment-currency" id="payment-currency" />
</form>

{{end}}

{{define "js"}}
    {{$widget := index .Data "widget"}}
<script src="https://js.stripe.com/v3/"></script>
<script>
    let card;
    const stripe = Stripe("{{.StripePublishableKey}}");
    const cardMessages = document.getElementById("card-messages");
    const payButton = document.getElementById("pay-button");
    const processing = document.getElementById("processing-payment");

    function hidePayButton() {
        payButton.classList.add("d-none");
        processing.classList.remove("d-none")
    }

    function showPayButtons() {
        payButton.classList.remove("d-none");
        processing.classList.add("d-none")
    }

    function showCardError(msg) {
        cardMessages.classList.add("alert-danger");
        cardMessages.classList.remove("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = msg; // display error
    }   

    function showCardSucess() {
        cardMessages.classList.remove("alert-danger");
        cardMessages.classList.add("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = "Transaction successful!";
    }

    function validation() {
        const form = document.getElementById("charge-form");
        if (form.checkValidity() === false) {
            this.event.preventDefault();
            this.event.stopPropagation();
            form.classList.add("was-validated");
            return;
        }
        form.classList.add("was-validated");
        hidePayButton();

        const amountToCharge = document.getElementById("amount").value;
        
        stripe.createPaymentMethod({
            type: "card",
            card: card,
            billing_details: {
                email: document.getElementById("cardholder-email").value,
            },
        }).then(stripePaymentMethodHandler);
    }

    function stripePaymentMethodHandler(result) {
        if (result.error) {
            showCardError(result.error.message);
        } else {
            // get customer details from submission and subscribe to plan
            const payload = {
                plan: "{{$widget.PlanID}}",
                product_id: document.getElementById("product-id").value,
                payment_method: result.paymentMethod.id,
                email: document.getElementById("cardholder-email").value,
                last_four: result.paymentMethod.card.last4,
                card_brand: result.paymentMethod.card.brand,
                exp_month: result.paymentMethod.card.exp_month,
                exp_year: result.paymentMethod.card.exp_year,
                first_name: document.getElementById("first-name").value,
                last_name: document.getElementById("last-name").value,
                amount: document.getElementById("amount").value,
            }

            const requestOptions = {
                method: "post",
                headers: {
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                },
                body: JSON.stringify(payload),
            }

            fetch("{{.API}}/api/create-customer-and-subscribe-to-plan", requestOptions)
            .then(response => response.json())
            .then((data) => {
                // disable spinner
                processing.classList.add("d-none");
                showCardSucess();

                // add select data to local storage
                sessionStorage.first_name = document.getElementById("first-name").value;
                sessionStorage.last_name = document.getElementById("last-name").value;
                sessionStorage.amount = "{{formatCurrency $widget.Price}}"
                sessionStorage.last_four = result.paymentMethod.card.last4;

                // redirect user to receipt page
                location.href = "/receipt/bronze";
            });
        }
    }

    (function() {
        // create stripe and elements
        const elements = stripe.elements();
        const style = {
            base: {
                fontSize: "16px",
                lineHeight: "24px",
            }
        };

        // create card entry
        card = elements.create("card", {
            style: style,
            hidePostalCode: true,
        });
        card.mount("#card-element");

        // check for input errors
        card.addEventListener("change", (event) => {
            let displayError = document.getElementById("card-errors");
            if (event.error) {
                displayError.classList.remove("d-none");
                displayError.textContent = event.error.message;
            } else {
                displayError.classList.add("d-none");
                displayError.textContent = "";
            }
        });
    })();
</script>
{{end}}