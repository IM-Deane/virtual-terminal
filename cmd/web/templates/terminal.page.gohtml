{{template "base" .}}

{{define "title"}}
    Virtual Terminal
{{end}}

{{define "content"}}
<h2>Virtual Terminal</h2>
<hr/>

<div class="alert alert-danger text-center d-none" id="card-messages"></div>
<form
method="post"
action="/payment-succeeded"
name="charge-form" id="charge-form"
class="d-block needs-validation charge-form"
autocomplete="off"
novalidate=""
>
    <div class="mb-3">
        <label for="amount" class="form-label">Amount</label>
        <input type="text" name="amount" id="amount" class="form-control" required="" autocomplete="amount-new" />
    </div>

    <div class="mb-3">
        <label for="cardholder-name" class="form-label">Cardholder Name</label>
        <input type="text" name="cardholder-name" id="cardholder-name" class="form-control" required="" autocomplete="cardholder-name-new" />
    </div>

    <div class="mb-3">
        <label for="cardholder-email" class="form-label">Cardholder Email</label>
        <input type="email" name="cardholder-email" id="cardholder-email" class="form-control" required="" autocomplete="cardholder-email-new" />
    </div>

    <!-- Card Number will be built by Stripe -->
    <div class="mb-3">
        <label for="card-element" class="form-label">Credit Card</label>
        <div id="card-element" class="form-control"></div>
        <div id="card-errors" class="alert-danger text-center" role="alert"></div>
        <div id="card-success" class="alert-success text-center" id="card-success" role="alert"></div>
    </div>

    <hr/>

    <a id="pay-button" href="javascript:void(0)" class="btn btn-primary" onclick="validation()">Charge Card</a>
    <div id="processing-payment" class="text-center d-none">
        <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
    
    <input type="hidden" name="payment-intent" id="payment-intent" />
    <input type="hidden" name="payment-method" id="payment-method" />
    <input type="hidden" name="payment-amount" id="payment-amount" />
    <input type="hidden" name="payment-currency" id="payment-currency" />
</form>
{{end}}

{{define "js"}}
    <script src="https://js.stripe.com/v3/"></script>

    <script>
    let card;
    const stripe = Stripe("pk_test_51JCpYoIeFNhE9u8z0Dak87VfPbgqAr2aj1bZxeLMkaSa9xzMJQWafwNQHY0dOxeNbVDZh85kAXXH6fEYJFKZ5WB6004V33hqPh");
    const cardMessages = document.getElementById("card-messages");
    const payButton = document.getElementById("pay-button");
    const processing = document.getElementById("processing-payment");

    function hidePayButton() {
        payButton.classList.add("d-none");
        processing.classList.remove("d-none")
    }

    function showPayButtons() {
        payButton.classList.remove("d-none");
        processing.classList.add("d-none")
    }

    function showCardError(msg) {
        cardMessages.classList.add("alert-danger");
        cardMessages.classList.remove("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = msg; // display error
    }   

    function showCardSucess() {
        cardMessages.classList.remove("alert-danger");
        cardMessages.classList.add("alert-success");
        cardMessages.classList.remove("d-none");
        cardMessages.innerText = "Transaction successful!";
    }   

    function validation() {
        const form = document.getElementById("charge-form");
        if (form.checkValidity() === false) {
            this.event.preventDefault();
            this.event.stopPropagation();
            form.classList.add("was-validated");
            return;
        }
        form.classList.add("was-validated");
        hidePayButton();

        const amountToCharge = String(parseFloat(document.getElementById("amount").value) * 100);
        const payload = {
            amount: amountToCharge,
            currency: "cad",
        };

        const requestOptions = {
            method: "POST",
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json",
            },
            body: JSON.stringify(payload)
        };

        fetch("http://localhost:4001/api/payment-intent", requestOptions)
        .then((response) => response.text())
        .then((res) => {
            let data;
            try {
                data = JSON.parse(res);
                // charge card
                stripe.confirmCardPayment(
                    data.client_secret, {
                        payment_method: {
                            card: card,
                            billing_details: {
                                name: document.getElementById("cardholder-name").value,
                            },
                        },
                    }
                ).then((result) => {
                    if (result.error) {
                        // card declined or something went wrong
                        showCardError(result.error.message);
                        showPayButtons();
                    } else if (result.paymentIntent) {
                        if (result.paymentIntent.status === "succeeded") {
                            // card has been charged
                            document.getElementById("payment-method").value = result.paymentIntent.payment_method_types[0];
                            document.getElementById("payment-intent").value = result.paymentIntent.id;
                            document.getElementById("payment-amount").value = result.paymentIntent.amount;
                            document.getElementById("payment-currency").value = result.paymentIntent.currency;
                            // hide spinner
                            processing.classList.add("d-none");
                            showCardSucess();
                            // TODO: now submit the form to generate recipet
                        }
                    }
                }); 
            } catch (err) {
            console.log(err);
            showCardError("Invalid response from payment gateway!");
            showPayButtons();
            }
        })
    }

    (function() {
        // create stripe and elements
        const elements = stripe.elements();
        const style = {
            base: {
                fontSize: "16px",
                lineHeight: "24px",
            }
        };

        // create card entry
        card = elements.create("card", {
            style: style,
            hidePostalCode: true,
        });
        card.mount("#card-element");

        // check for input errors
        card.addEventListener("change", (event) => {
            let displayError = document.getElementById("card-errors");
            if (event.error) {
                displayError.classList.remove("d-none");
                displayError.textContent = event.error.message;
            } else {
                displayError.classList.add("d-none");
                displayError.textContent = "";
            }
        });
    })();
    </script>
{{end}}